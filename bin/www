#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mouse:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var WebSocketServer = require('ws').Server;
var wss = new WebSocketServer({server: server});
var fs = require('fs');
var transmissionFile = '/logs/transmission';
var connectionsFile = '/logs/connections';

var connections = {};
var connectionIDCounter = 0;

wss.on('connection', function (ws) {
    var connection = ws;
    // Store a reference to the connection using an incrementing ID
    connection.id = connectionIDCounter++;
    connections[connection.id] = connection;
    var connectionLog={id: connection.id, details: connections[connection.id]};

    console.log(JSON.stringify(JSON.toString(connections[connection.id])));

    //fs.writeFile(connectionsFile, JSON.stringify(connectionLog, null, 4), function (err) {
    //    if (err) {
    //        console.log(err);
    //    } else {
    //        console.log('Connection saved to file');
    //    }
    //});

    ws.send(JSON.stringify({type: "id", x: connection.id}));

    // Now you can access the connection with connections[id] and find out
    // the id for a connection with connection.id
    console.log((new Date()) + ' Connection ID ' + connection.id + ' accepted.');
    ws.on('close', function () {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected. ' +
            "Connection ID: " + connection.id);
        // Make sure to remove closed connections from the global pool
        delete connections[connection.id];
    });

    process.on('dataAdd', function (dane, id) {
        var client = connections[id];
        var log = {id: id, data: dane};

        fs.writeFile(transmissionFile, JSON.stringify(log, null, 4), function (err) {
            if (err) {
                console.log(err);
            } else {
                console.log('Transmission saved to file');
            }
        });
        client.send(JSON.stringify(dane));
    });

});


